// Code generated by MockGen. DO NOT EDIT.
// Source: ./infra.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/ipdk-io/k8s-infra-offload/proto"
	grpc "google.golang.org/grpc"
)

// MockInfraCniClient is a mock of InfraCniClient interface.
type MockInfraCniClient struct {
	ctrl     *gomock.Controller
	recorder *MockInfraCniClientMockRecorder
}

// MockInfraCniClientMockRecorder is the mock recorder for MockInfraCniClient.
type MockInfraCniClientMockRecorder struct {
	mock *MockInfraCniClient
}

// NewMockInfraCniClient creates a new mock instance.
func NewMockInfraCniClient(ctrl *gomock.Controller) *MockInfraCniClient {
	mock := &MockInfraCniClient{ctrl: ctrl}
	mock.recorder = &MockInfraCniClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfraCniClient) EXPECT() *MockInfraCniClientMockRecorder {
	return m.recorder
}

// CreateNetwork mocks base method.
func (m *MockInfraCniClient) CreateNetwork(ctx context.Context, in *proto.CreateNetworkRequest, opts ...grpc.CallOption) (*proto.InfraAddReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNetwork", varargs...)
	ret0, _ := ret[0].(*proto.InfraAddReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockInfraCniClientMockRecorder) CreateNetwork(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockInfraCniClient)(nil).CreateNetwork), varargs...)
}

// DeleteNetwork mocks base method.
func (m *MockInfraCniClient) DeleteNetwork(ctx context.Context, in *proto.DeleteNetworkRequest, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNetwork", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockInfraCniClientMockRecorder) DeleteNetwork(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockInfraCniClient)(nil).DeleteNetwork), varargs...)
}

// SetupHostInterface mocks base method.
func (m *MockInfraCniClient) SetupHostInterface(ctx context.Context, in *proto.SetupHostInterfaceRequest, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetupHostInterface", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupHostInterface indicates an expected call of SetupHostInterface.
func (mr *MockInfraCniClientMockRecorder) SetupHostInterface(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupHostInterface", reflect.TypeOf((*MockInfraCniClient)(nil).SetupHostInterface), varargs...)
}

// MockInfraCniServer is a mock of InfraCniServer interface.
type MockInfraCniServer struct {
	ctrl     *gomock.Controller
	recorder *MockInfraCniServerMockRecorder
}

// MockInfraCniServerMockRecorder is the mock recorder for MockInfraCniServer.
type MockInfraCniServerMockRecorder struct {
	mock *MockInfraCniServer
}

// NewMockInfraCniServer creates a new mock instance.
func NewMockInfraCniServer(ctrl *gomock.Controller) *MockInfraCniServer {
	mock := &MockInfraCniServer{ctrl: ctrl}
	mock.recorder = &MockInfraCniServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfraCniServer) EXPECT() *MockInfraCniServerMockRecorder {
	return m.recorder
}

// CreateNetwork mocks base method.
func (m *MockInfraCniServer) CreateNetwork(arg0 context.Context, arg1 *proto.CreateNetworkRequest) (*proto.InfraAddReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", arg0, arg1)
	ret0, _ := ret[0].(*proto.InfraAddReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockInfraCniServerMockRecorder) CreateNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockInfraCniServer)(nil).CreateNetwork), arg0, arg1)
}

// DeleteNetwork mocks base method.
func (m *MockInfraCniServer) DeleteNetwork(arg0 context.Context, arg1 *proto.DeleteNetworkRequest) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockInfraCniServerMockRecorder) DeleteNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockInfraCniServer)(nil).DeleteNetwork), arg0, arg1)
}

// SetupHostInterface mocks base method.
func (m *MockInfraCniServer) SetupHostInterface(arg0 context.Context, arg1 *proto.SetupHostInterfaceRequest) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupHostInterface", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupHostInterface indicates an expected call of SetupHostInterface.
func (mr *MockInfraCniServerMockRecorder) SetupHostInterface(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupHostInterface", reflect.TypeOf((*MockInfraCniServer)(nil).SetupHostInterface), arg0, arg1)
}

// MockInfraServicesClient is a mock of InfraServicesClient interface.
type MockInfraServicesClient struct {
	ctrl     *gomock.Controller
	recorder *MockInfraServicesClientMockRecorder
}

// MockInfraServicesClientMockRecorder is the mock recorder for MockInfraServicesClient.
type MockInfraServicesClientMockRecorder struct {
	mock *MockInfraServicesClient
}

// NewMockInfraServicesClient creates a new mock instance.
func NewMockInfraServicesClient(ctrl *gomock.Controller) *MockInfraServicesClient {
	mock := &MockInfraServicesClient{ctrl: ctrl}
	mock.recorder = &MockInfraServicesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfraServicesClient) EXPECT() *MockInfraServicesClientMockRecorder {
	return m.recorder
}

// AddDelSnatPrefix mocks base method.
func (m *MockInfraServicesClient) AddDelSnatPrefix(ctx context.Context, in *proto.AddDelSnatPrefixRequest, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddDelSnatPrefix", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDelSnatPrefix indicates an expected call of AddDelSnatPrefix.
func (mr *MockInfraServicesClientMockRecorder) AddDelSnatPrefix(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDelSnatPrefix", reflect.TypeOf((*MockInfraServicesClient)(nil).AddDelSnatPrefix), varargs...)
}

// NatTranslationAdd mocks base method.
func (m *MockInfraServicesClient) NatTranslationAdd(ctx context.Context, in *proto.NatTranslation, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NatTranslationAdd", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatTranslationAdd indicates an expected call of NatTranslationAdd.
func (mr *MockInfraServicesClientMockRecorder) NatTranslationAdd(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NatTranslationAdd", reflect.TypeOf((*MockInfraServicesClient)(nil).NatTranslationAdd), varargs...)
}

// NatTranslationDelete mocks base method.
func (m *MockInfraServicesClient) NatTranslationDelete(ctx context.Context, in *proto.NatTranslation, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NatTranslationDelete", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatTranslationDelete indicates an expected call of NatTranslationDelete.
func (mr *MockInfraServicesClientMockRecorder) NatTranslationDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NatTranslationDelete", reflect.TypeOf((*MockInfraServicesClient)(nil).NatTranslationDelete), varargs...)
}

// SetSnatAddress mocks base method.
func (m *MockInfraServicesClient) SetSnatAddress(ctx context.Context, in *proto.SetSnatAddressRequest, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSnatAddress", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSnatAddress indicates an expected call of SetSnatAddress.
func (mr *MockInfraServicesClientMockRecorder) SetSnatAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnatAddress", reflect.TypeOf((*MockInfraServicesClient)(nil).SetSnatAddress), varargs...)
}

// MockInfraServicesServer is a mock of InfraServicesServer interface.
type MockInfraServicesServer struct {
	ctrl     *gomock.Controller
	recorder *MockInfraServicesServerMockRecorder
}

// MockInfraServicesServerMockRecorder is the mock recorder for MockInfraServicesServer.
type MockInfraServicesServerMockRecorder struct {
	mock *MockInfraServicesServer
}

// NewMockInfraServicesServer creates a new mock instance.
func NewMockInfraServicesServer(ctrl *gomock.Controller) *MockInfraServicesServer {
	mock := &MockInfraServicesServer{ctrl: ctrl}
	mock.recorder = &MockInfraServicesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfraServicesServer) EXPECT() *MockInfraServicesServerMockRecorder {
	return m.recorder
}

// AddDelSnatPrefix mocks base method.
func (m *MockInfraServicesServer) AddDelSnatPrefix(arg0 context.Context, arg1 *proto.AddDelSnatPrefixRequest) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDelSnatPrefix", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDelSnatPrefix indicates an expected call of AddDelSnatPrefix.
func (mr *MockInfraServicesServerMockRecorder) AddDelSnatPrefix(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDelSnatPrefix", reflect.TypeOf((*MockInfraServicesServer)(nil).AddDelSnatPrefix), arg0, arg1)
}

// NatTranslationAdd mocks base method.
func (m *MockInfraServicesServer) NatTranslationAdd(arg0 context.Context, arg1 *proto.NatTranslation) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NatTranslationAdd", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatTranslationAdd indicates an expected call of NatTranslationAdd.
func (mr *MockInfraServicesServerMockRecorder) NatTranslationAdd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NatTranslationAdd", reflect.TypeOf((*MockInfraServicesServer)(nil).NatTranslationAdd), arg0, arg1)
}

// NatTranslationDelete mocks base method.
func (m *MockInfraServicesServer) NatTranslationDelete(arg0 context.Context, arg1 *proto.NatTranslation) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NatTranslationDelete", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatTranslationDelete indicates an expected call of NatTranslationDelete.
func (mr *MockInfraServicesServerMockRecorder) NatTranslationDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NatTranslationDelete", reflect.TypeOf((*MockInfraServicesServer)(nil).NatTranslationDelete), arg0, arg1)
}

// SetSnatAddress mocks base method.
func (m *MockInfraServicesServer) SetSnatAddress(arg0 context.Context, arg1 *proto.SetSnatAddressRequest) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSnatAddress", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSnatAddress indicates an expected call of SetSnatAddress.
func (mr *MockInfraServicesServerMockRecorder) SetSnatAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnatAddress", reflect.TypeOf((*MockInfraServicesServer)(nil).SetSnatAddress), arg0, arg1)
}

// MockInfraPolicyClient is a mock of InfraPolicyClient interface.
type MockInfraPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockInfraPolicyClientMockRecorder
}

// MockInfraPolicyClientMockRecorder is the mock recorder for MockInfraPolicyClient.
type MockInfraPolicyClientMockRecorder struct {
	mock *MockInfraPolicyClient
}

// NewMockInfraPolicyClient creates a new mock instance.
func NewMockInfraPolicyClient(ctrl *gomock.Controller) *MockInfraPolicyClient {
	mock := &MockInfraPolicyClient{ctrl: ctrl}
	mock.recorder = &MockInfraPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfraPolicyClient) EXPECT() *MockInfraPolicyClientMockRecorder {
	return m.recorder
}

// ActivePolicyRemove mocks base method.
func (m *MockInfraPolicyClient) ActivePolicyRemove(ctx context.Context, in *proto.ActivePolicyRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivePolicyRemove", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivePolicyRemove indicates an expected call of ActivePolicyRemove.
func (mr *MockInfraPolicyClientMockRecorder) ActivePolicyRemove(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivePolicyRemove", reflect.TypeOf((*MockInfraPolicyClient)(nil).ActivePolicyRemove), varargs...)
}

// ActivePolicyUpdate mocks base method.
func (m *MockInfraPolicyClient) ActivePolicyUpdate(ctx context.Context, in *proto.ActivePolicyUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivePolicyUpdate", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivePolicyUpdate indicates an expected call of ActivePolicyUpdate.
func (mr *MockInfraPolicyClientMockRecorder) ActivePolicyUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivePolicyUpdate", reflect.TypeOf((*MockInfraPolicyClient)(nil).ActivePolicyUpdate), varargs...)
}

// RemoveActiveProfile mocks base method.
func (m *MockInfraPolicyClient) RemoveActiveProfile(ctx context.Context, in *proto.ActiveProfileRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveActiveProfile", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveActiveProfile indicates an expected call of RemoveActiveProfile.
func (mr *MockInfraPolicyClientMockRecorder) RemoveActiveProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveActiveProfile", reflect.TypeOf((*MockInfraPolicyClient)(nil).RemoveActiveProfile), varargs...)
}

// RemoveHostEndpoint mocks base method.
func (m *MockInfraPolicyClient) RemoveHostEndpoint(ctx context.Context, in *proto.HostEndpointRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveHostEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHostEndpoint indicates an expected call of RemoveHostEndpoint.
func (mr *MockInfraPolicyClientMockRecorder) RemoveHostEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHostEndpoint", reflect.TypeOf((*MockInfraPolicyClient)(nil).RemoveHostEndpoint), varargs...)
}

// RemoveHostMetaData mocks base method.
func (m *MockInfraPolicyClient) RemoveHostMetaData(ctx context.Context, in *proto.HostMetadataRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveHostMetaData", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHostMetaData indicates an expected call of RemoveHostMetaData.
func (mr *MockInfraPolicyClientMockRecorder) RemoveHostMetaData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHostMetaData", reflect.TypeOf((*MockInfraPolicyClient)(nil).RemoveHostMetaData), varargs...)
}

// RemoveIPSet mocks base method.
func (m *MockInfraPolicyClient) RemoveIPSet(ctx context.Context, in *proto.IPSetRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveIPSet", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveIPSet indicates an expected call of RemoveIPSet.
func (mr *MockInfraPolicyClientMockRecorder) RemoveIPSet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIPSet", reflect.TypeOf((*MockInfraPolicyClient)(nil).RemoveIPSet), varargs...)
}

// RemoveLocalEndpoint mocks base method.
func (m *MockInfraPolicyClient) RemoveLocalEndpoint(ctx context.Context, in *proto.WorkloadEndpointRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveLocalEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLocalEndpoint indicates an expected call of RemoveLocalEndpoint.
func (mr *MockInfraPolicyClientMockRecorder) RemoveLocalEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLocalEndpoint", reflect.TypeOf((*MockInfraPolicyClient)(nil).RemoveLocalEndpoint), varargs...)
}

// RemoveNamespace mocks base method.
func (m *MockInfraPolicyClient) RemoveNamespace(ctx context.Context, in *proto.NamespaceRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveNamespace", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNamespace indicates an expected call of RemoveNamespace.
func (mr *MockInfraPolicyClientMockRecorder) RemoveNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNamespace", reflect.TypeOf((*MockInfraPolicyClient)(nil).RemoveNamespace), varargs...)
}

// RemoveRoute mocks base method.
func (m *MockInfraPolicyClient) RemoveRoute(ctx context.Context, in *proto.RouteRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveRoute", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRoute indicates an expected call of RemoveRoute.
func (mr *MockInfraPolicyClientMockRecorder) RemoveRoute(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoute", reflect.TypeOf((*MockInfraPolicyClient)(nil).RemoveRoute), varargs...)
}

// RemoveServiceAccount mocks base method.
func (m *MockInfraPolicyClient) RemoveServiceAccount(ctx context.Context, in *proto.ServiceAccountRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveServiceAccount", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveServiceAccount indicates an expected call of RemoveServiceAccount.
func (mr *MockInfraPolicyClientMockRecorder) RemoveServiceAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceAccount", reflect.TypeOf((*MockInfraPolicyClient)(nil).RemoveServiceAccount), varargs...)
}

// RemoveVXLANTunnelEndpoint mocks base method.
func (m *MockInfraPolicyClient) RemoveVXLANTunnelEndpoint(ctx context.Context, in *proto.VXLANTunnelEndpointRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveVXLANTunnelEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVXLANTunnelEndpoint indicates an expected call of RemoveVXLANTunnelEndpoint.
func (mr *MockInfraPolicyClientMockRecorder) RemoveVXLANTunnelEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVXLANTunnelEndpoint", reflect.TypeOf((*MockInfraPolicyClient)(nil).RemoveVXLANTunnelEndpoint), varargs...)
}

// RemoveWireguardEndpoint mocks base method.
func (m *MockInfraPolicyClient) RemoveWireguardEndpoint(ctx context.Context, in *proto.WireguardEndpointRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveWireguardEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveWireguardEndpoint indicates an expected call of RemoveWireguardEndpoint.
func (mr *MockInfraPolicyClientMockRecorder) RemoveWireguardEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWireguardEndpoint", reflect.TypeOf((*MockInfraPolicyClient)(nil).RemoveWireguardEndpoint), varargs...)
}

// UpdateActiveProfile mocks base method.
func (m *MockInfraPolicyClient) UpdateActiveProfile(ctx context.Context, in *proto.ActiveProfileUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateActiveProfile", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActiveProfile indicates an expected call of UpdateActiveProfile.
func (mr *MockInfraPolicyClientMockRecorder) UpdateActiveProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActiveProfile", reflect.TypeOf((*MockInfraPolicyClient)(nil).UpdateActiveProfile), varargs...)
}

// UpdateGlobalBGPConfig mocks base method.
func (m *MockInfraPolicyClient) UpdateGlobalBGPConfig(ctx context.Context, in *proto.GlobalBGPConfigUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalBGPConfig", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalBGPConfig indicates an expected call of UpdateGlobalBGPConfig.
func (mr *MockInfraPolicyClientMockRecorder) UpdateGlobalBGPConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalBGPConfig", reflect.TypeOf((*MockInfraPolicyClient)(nil).UpdateGlobalBGPConfig), varargs...)
}

// UpdateHostEndpoint mocks base method.
func (m *MockInfraPolicyClient) UpdateHostEndpoint(ctx context.Context, in *proto.HostEndpointUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHostEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostEndpoint indicates an expected call of UpdateHostEndpoint.
func (mr *MockInfraPolicyClientMockRecorder) UpdateHostEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostEndpoint", reflect.TypeOf((*MockInfraPolicyClient)(nil).UpdateHostEndpoint), varargs...)
}

// UpdateHostMetaData mocks base method.
func (m *MockInfraPolicyClient) UpdateHostMetaData(ctx context.Context, in *proto.HostMetadataUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHostMetaData", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostMetaData indicates an expected call of UpdateHostMetaData.
func (mr *MockInfraPolicyClientMockRecorder) UpdateHostMetaData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostMetaData", reflect.TypeOf((*MockInfraPolicyClient)(nil).UpdateHostMetaData), varargs...)
}

// UpdateIPSet mocks base method.
func (m *MockInfraPolicyClient) UpdateIPSet(ctx context.Context, in *proto.IPSetUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIPSet", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPSet indicates an expected call of UpdateIPSet.
func (mr *MockInfraPolicyClientMockRecorder) UpdateIPSet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSet", reflect.TypeOf((*MockInfraPolicyClient)(nil).UpdateIPSet), varargs...)
}

// UpdateIPSetDelta mocks base method.
func (m *MockInfraPolicyClient) UpdateIPSetDelta(ctx context.Context, in *proto.IPSetDeltaUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIPSetDelta", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPSetDelta indicates an expected call of UpdateIPSetDelta.
func (mr *MockInfraPolicyClientMockRecorder) UpdateIPSetDelta(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSetDelta", reflect.TypeOf((*MockInfraPolicyClient)(nil).UpdateIPSetDelta), varargs...)
}

// UpdateLocalEndpoint mocks base method.
func (m *MockInfraPolicyClient) UpdateLocalEndpoint(ctx context.Context, in *proto.WorkloadEndpointUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLocalEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocalEndpoint indicates an expected call of UpdateLocalEndpoint.
func (mr *MockInfraPolicyClientMockRecorder) UpdateLocalEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocalEndpoint", reflect.TypeOf((*MockInfraPolicyClient)(nil).UpdateLocalEndpoint), varargs...)
}

// UpdateNamespace mocks base method.
func (m *MockInfraPolicyClient) UpdateNamespace(ctx context.Context, in *proto.NamespaceUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNamespace", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespace indicates an expected call of UpdateNamespace.
func (mr *MockInfraPolicyClientMockRecorder) UpdateNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockInfraPolicyClient)(nil).UpdateNamespace), varargs...)
}

// UpdateRoute mocks base method.
func (m *MockInfraPolicyClient) UpdateRoute(ctx context.Context, in *proto.RouteUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoute", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoute indicates an expected call of UpdateRoute.
func (mr *MockInfraPolicyClientMockRecorder) UpdateRoute(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoute", reflect.TypeOf((*MockInfraPolicyClient)(nil).UpdateRoute), varargs...)
}

// UpdateServiceAccount mocks base method.
func (m *MockInfraPolicyClient) UpdateServiceAccount(ctx context.Context, in *proto.ServiceAccountUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceAccount", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceAccount indicates an expected call of UpdateServiceAccount.
func (mr *MockInfraPolicyClientMockRecorder) UpdateServiceAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceAccount", reflect.TypeOf((*MockInfraPolicyClient)(nil).UpdateServiceAccount), varargs...)
}

// UpdateVXLANTunnelEndpoint mocks base method.
func (m *MockInfraPolicyClient) UpdateVXLANTunnelEndpoint(ctx context.Context, in *proto.VXLANTunnelEndpointUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVXLANTunnelEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVXLANTunnelEndpoint indicates an expected call of UpdateVXLANTunnelEndpoint.
func (mr *MockInfraPolicyClientMockRecorder) UpdateVXLANTunnelEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVXLANTunnelEndpoint", reflect.TypeOf((*MockInfraPolicyClient)(nil).UpdateVXLANTunnelEndpoint), varargs...)
}

// UpdateWireguardEndpoint mocks base method.
func (m *MockInfraPolicyClient) UpdateWireguardEndpoint(ctx context.Context, in *proto.WireguardEndpointUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWireguardEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWireguardEndpoint indicates an expected call of UpdateWireguardEndpoint.
func (mr *MockInfraPolicyClientMockRecorder) UpdateWireguardEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWireguardEndpoint", reflect.TypeOf((*MockInfraPolicyClient)(nil).UpdateWireguardEndpoint), varargs...)
}

// MockInfraPolicyServer is a mock of InfraPolicyServer interface.
type MockInfraPolicyServer struct {
	ctrl     *gomock.Controller
	recorder *MockInfraPolicyServerMockRecorder
}

// MockInfraPolicyServerMockRecorder is the mock recorder for MockInfraPolicyServer.
type MockInfraPolicyServerMockRecorder struct {
	mock *MockInfraPolicyServer
}

// NewMockInfraPolicyServer creates a new mock instance.
func NewMockInfraPolicyServer(ctrl *gomock.Controller) *MockInfraPolicyServer {
	mock := &MockInfraPolicyServer{ctrl: ctrl}
	mock.recorder = &MockInfraPolicyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfraPolicyServer) EXPECT() *MockInfraPolicyServerMockRecorder {
	return m.recorder
}

// ActivePolicyRemove mocks base method.
func (m *MockInfraPolicyServer) ActivePolicyRemove(arg0 context.Context, arg1 *proto.ActivePolicyRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivePolicyRemove", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivePolicyRemove indicates an expected call of ActivePolicyRemove.
func (mr *MockInfraPolicyServerMockRecorder) ActivePolicyRemove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivePolicyRemove", reflect.TypeOf((*MockInfraPolicyServer)(nil).ActivePolicyRemove), arg0, arg1)
}

// ActivePolicyUpdate mocks base method.
func (m *MockInfraPolicyServer) ActivePolicyUpdate(arg0 context.Context, arg1 *proto.ActivePolicyUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivePolicyUpdate", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivePolicyUpdate indicates an expected call of ActivePolicyUpdate.
func (mr *MockInfraPolicyServerMockRecorder) ActivePolicyUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivePolicyUpdate", reflect.TypeOf((*MockInfraPolicyServer)(nil).ActivePolicyUpdate), arg0, arg1)
}

// RemoveActiveProfile mocks base method.
func (m *MockInfraPolicyServer) RemoveActiveProfile(arg0 context.Context, arg1 *proto.ActiveProfileRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveActiveProfile", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveActiveProfile indicates an expected call of RemoveActiveProfile.
func (mr *MockInfraPolicyServerMockRecorder) RemoveActiveProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveActiveProfile", reflect.TypeOf((*MockInfraPolicyServer)(nil).RemoveActiveProfile), arg0, arg1)
}

// RemoveHostEndpoint mocks base method.
func (m *MockInfraPolicyServer) RemoveHostEndpoint(arg0 context.Context, arg1 *proto.HostEndpointRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHostEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHostEndpoint indicates an expected call of RemoveHostEndpoint.
func (mr *MockInfraPolicyServerMockRecorder) RemoveHostEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHostEndpoint", reflect.TypeOf((*MockInfraPolicyServer)(nil).RemoveHostEndpoint), arg0, arg1)
}

// RemoveHostMetaData mocks base method.
func (m *MockInfraPolicyServer) RemoveHostMetaData(arg0 context.Context, arg1 *proto.HostMetadataRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHostMetaData", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHostMetaData indicates an expected call of RemoveHostMetaData.
func (mr *MockInfraPolicyServerMockRecorder) RemoveHostMetaData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHostMetaData", reflect.TypeOf((*MockInfraPolicyServer)(nil).RemoveHostMetaData), arg0, arg1)
}

// RemoveIPSet mocks base method.
func (m *MockInfraPolicyServer) RemoveIPSet(arg0 context.Context, arg1 *proto.IPSetRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIPSet", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveIPSet indicates an expected call of RemoveIPSet.
func (mr *MockInfraPolicyServerMockRecorder) RemoveIPSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIPSet", reflect.TypeOf((*MockInfraPolicyServer)(nil).RemoveIPSet), arg0, arg1)
}

// RemoveLocalEndpoint mocks base method.
func (m *MockInfraPolicyServer) RemoveLocalEndpoint(arg0 context.Context, arg1 *proto.WorkloadEndpointRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLocalEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLocalEndpoint indicates an expected call of RemoveLocalEndpoint.
func (mr *MockInfraPolicyServerMockRecorder) RemoveLocalEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLocalEndpoint", reflect.TypeOf((*MockInfraPolicyServer)(nil).RemoveLocalEndpoint), arg0, arg1)
}

// RemoveNamespace mocks base method.
func (m *MockInfraPolicyServer) RemoveNamespace(arg0 context.Context, arg1 *proto.NamespaceRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNamespace", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNamespace indicates an expected call of RemoveNamespace.
func (mr *MockInfraPolicyServerMockRecorder) RemoveNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNamespace", reflect.TypeOf((*MockInfraPolicyServer)(nil).RemoveNamespace), arg0, arg1)
}

// RemoveRoute mocks base method.
func (m *MockInfraPolicyServer) RemoveRoute(arg0 context.Context, arg1 *proto.RouteRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoute", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRoute indicates an expected call of RemoveRoute.
func (mr *MockInfraPolicyServerMockRecorder) RemoveRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoute", reflect.TypeOf((*MockInfraPolicyServer)(nil).RemoveRoute), arg0, arg1)
}

// RemoveServiceAccount mocks base method.
func (m *MockInfraPolicyServer) RemoveServiceAccount(arg0 context.Context, arg1 *proto.ServiceAccountRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveServiceAccount", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveServiceAccount indicates an expected call of RemoveServiceAccount.
func (mr *MockInfraPolicyServerMockRecorder) RemoveServiceAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceAccount", reflect.TypeOf((*MockInfraPolicyServer)(nil).RemoveServiceAccount), arg0, arg1)
}

// RemoveVXLANTunnelEndpoint mocks base method.
func (m *MockInfraPolicyServer) RemoveVXLANTunnelEndpoint(arg0 context.Context, arg1 *proto.VXLANTunnelEndpointRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVXLANTunnelEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVXLANTunnelEndpoint indicates an expected call of RemoveVXLANTunnelEndpoint.
func (mr *MockInfraPolicyServerMockRecorder) RemoveVXLANTunnelEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVXLANTunnelEndpoint", reflect.TypeOf((*MockInfraPolicyServer)(nil).RemoveVXLANTunnelEndpoint), arg0, arg1)
}

// RemoveWireguardEndpoint mocks base method.
func (m *MockInfraPolicyServer) RemoveWireguardEndpoint(arg0 context.Context, arg1 *proto.WireguardEndpointRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWireguardEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveWireguardEndpoint indicates an expected call of RemoveWireguardEndpoint.
func (mr *MockInfraPolicyServerMockRecorder) RemoveWireguardEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWireguardEndpoint", reflect.TypeOf((*MockInfraPolicyServer)(nil).RemoveWireguardEndpoint), arg0, arg1)
}

// UpdateActiveProfile mocks base method.
func (m *MockInfraPolicyServer) UpdateActiveProfile(arg0 context.Context, arg1 *proto.ActiveProfileUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActiveProfile", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActiveProfile indicates an expected call of UpdateActiveProfile.
func (mr *MockInfraPolicyServerMockRecorder) UpdateActiveProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActiveProfile", reflect.TypeOf((*MockInfraPolicyServer)(nil).UpdateActiveProfile), arg0, arg1)
}

// UpdateGlobalBGPConfig mocks base method.
func (m *MockInfraPolicyServer) UpdateGlobalBGPConfig(arg0 context.Context, arg1 *proto.GlobalBGPConfigUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalBGPConfig", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalBGPConfig indicates an expected call of UpdateGlobalBGPConfig.
func (mr *MockInfraPolicyServerMockRecorder) UpdateGlobalBGPConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalBGPConfig", reflect.TypeOf((*MockInfraPolicyServer)(nil).UpdateGlobalBGPConfig), arg0, arg1)
}

// UpdateHostEndpoint mocks base method.
func (m *MockInfraPolicyServer) UpdateHostEndpoint(arg0 context.Context, arg1 *proto.HostEndpointUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostEndpoint indicates an expected call of UpdateHostEndpoint.
func (mr *MockInfraPolicyServerMockRecorder) UpdateHostEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostEndpoint", reflect.TypeOf((*MockInfraPolicyServer)(nil).UpdateHostEndpoint), arg0, arg1)
}

// UpdateHostMetaData mocks base method.
func (m *MockInfraPolicyServer) UpdateHostMetaData(arg0 context.Context, arg1 *proto.HostMetadataUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostMetaData", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostMetaData indicates an expected call of UpdateHostMetaData.
func (mr *MockInfraPolicyServerMockRecorder) UpdateHostMetaData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostMetaData", reflect.TypeOf((*MockInfraPolicyServer)(nil).UpdateHostMetaData), arg0, arg1)
}

// UpdateIPSet mocks base method.
func (m *MockInfraPolicyServer) UpdateIPSet(arg0 context.Context, arg1 *proto.IPSetUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIPSet", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPSet indicates an expected call of UpdateIPSet.
func (mr *MockInfraPolicyServerMockRecorder) UpdateIPSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSet", reflect.TypeOf((*MockInfraPolicyServer)(nil).UpdateIPSet), arg0, arg1)
}

// UpdateIPSetDelta mocks base method.
func (m *MockInfraPolicyServer) UpdateIPSetDelta(arg0 context.Context, arg1 *proto.IPSetDeltaUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIPSetDelta", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPSetDelta indicates an expected call of UpdateIPSetDelta.
func (mr *MockInfraPolicyServerMockRecorder) UpdateIPSetDelta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSetDelta", reflect.TypeOf((*MockInfraPolicyServer)(nil).UpdateIPSetDelta), arg0, arg1)
}

// UpdateLocalEndpoint mocks base method.
func (m *MockInfraPolicyServer) UpdateLocalEndpoint(arg0 context.Context, arg1 *proto.WorkloadEndpointUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocalEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocalEndpoint indicates an expected call of UpdateLocalEndpoint.
func (mr *MockInfraPolicyServerMockRecorder) UpdateLocalEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocalEndpoint", reflect.TypeOf((*MockInfraPolicyServer)(nil).UpdateLocalEndpoint), arg0, arg1)
}

// UpdateNamespace mocks base method.
func (m *MockInfraPolicyServer) UpdateNamespace(arg0 context.Context, arg1 *proto.NamespaceUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespace", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespace indicates an expected call of UpdateNamespace.
func (mr *MockInfraPolicyServerMockRecorder) UpdateNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockInfraPolicyServer)(nil).UpdateNamespace), arg0, arg1)
}

// UpdateRoute mocks base method.
func (m *MockInfraPolicyServer) UpdateRoute(arg0 context.Context, arg1 *proto.RouteUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoute", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoute indicates an expected call of UpdateRoute.
func (mr *MockInfraPolicyServerMockRecorder) UpdateRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoute", reflect.TypeOf((*MockInfraPolicyServer)(nil).UpdateRoute), arg0, arg1)
}

// UpdateServiceAccount mocks base method.
func (m *MockInfraPolicyServer) UpdateServiceAccount(arg0 context.Context, arg1 *proto.ServiceAccountUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceAccount", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceAccount indicates an expected call of UpdateServiceAccount.
func (mr *MockInfraPolicyServerMockRecorder) UpdateServiceAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceAccount", reflect.TypeOf((*MockInfraPolicyServer)(nil).UpdateServiceAccount), arg0, arg1)
}

// UpdateVXLANTunnelEndpoint mocks base method.
func (m *MockInfraPolicyServer) UpdateVXLANTunnelEndpoint(arg0 context.Context, arg1 *proto.VXLANTunnelEndpointUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVXLANTunnelEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVXLANTunnelEndpoint indicates an expected call of UpdateVXLANTunnelEndpoint.
func (mr *MockInfraPolicyServerMockRecorder) UpdateVXLANTunnelEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVXLANTunnelEndpoint", reflect.TypeOf((*MockInfraPolicyServer)(nil).UpdateVXLANTunnelEndpoint), arg0, arg1)
}

// UpdateWireguardEndpoint mocks base method.
func (m *MockInfraPolicyServer) UpdateWireguardEndpoint(arg0 context.Context, arg1 *proto.WireguardEndpointUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWireguardEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWireguardEndpoint indicates an expected call of UpdateWireguardEndpoint.
func (mr *MockInfraPolicyServerMockRecorder) UpdateWireguardEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWireguardEndpoint", reflect.TypeOf((*MockInfraPolicyServer)(nil).UpdateWireguardEndpoint), arg0, arg1)
}
